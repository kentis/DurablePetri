FILENAME(pragmatic: '__FILENAME__', template: {params -> "${params.name}.clj"})




ExternalTemplate(pragmatic: 'service', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/service.tmpl', isContainer: true)
DECLARATIONS(pragmatic: '_-DECLARATIONS-_', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/declarations.tmpl')
COMMENTS(pragmatic:'__COMMENTS__', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/comments.tmpl')
STMT(pragmatic: 'Stmt', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/stmt.tmpl')
//COND(pragmatic: '_COND_', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/cond.tmpl')
TRUE(pragmatic: '_TRUE_', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/true.tmpl')
//EXPR(pragmatic: '_EXPR_', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/expr.tmpl')



classTemplate(pragmatic: 'principal', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/mainClass.tmpl', isContainer: true)
startLoop(pragmatic: 'startLoop', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/loop.tmpl', isContainer: true, isMultiContainer: true)
Return(pragmatic: 'return', weight: Integer.MAX_VALUE, template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/return.tmpl')


setToken(pragmatic: 'setToken', parameterStrategy: CONDITIONALS, template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/setToken.tmpl')
setLCV(pragmatic: 'setLCV', parameterStrategy: NET_ATT, template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/setLCV.tmpl', weight: 1000)
SetField(pragmatic: 'SetField', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/setField.tmpl')			
setValue(pragmatic: 'setValue', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/setValue.tmpl')
			
/** List operations **/			
pop(pragmatic: 'pop', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/extra/pop.tmpl')
Append(pragmatic: 'Append', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/append.tmpl')

partition(pragmatic: 'partition', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/extra/partition.tmpl')
Departition(pragmatic: 'Departition', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/opers/departition.tmpl')



/** Networking **/
OpenChannel(pragmatic: 'OpenChannel', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/openChannel.tmpl')
OpenServerChannel(pragmatic: 'OpenServerChannel', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/openServerChannel.tmpl')
send(pragmatic: 'send', parameterStrategy: FROM_PRAGMATIC, template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/sendMessageTCP.tmpl', dependencies: 'channels')
Receive(pragmatic: 'Receive', template: '/home/kent/ws-ePNK/OntologyReastrictedNets/plattforms/clojure/recieveMessageTCP.tmpl', dependencies: 'channels')