Principal(origin: 'explicit', constraints: [levels: 'protocol', connectedTypes: 'SubstitutionTransition'])
channel(origin: 'explicit')
Id(origin: 'explicit', controlFlow: true, constraints: [levels: 'service', connectedTypes: 'Place'])
LCV(origin: 'explicit')
service(origin: 'explicit', constraints: [[levels: 'principal', connectedTypes: 'SubstitutionTransition'],[levels: 'service',connectedTypes:'Transition']])
state(origin: 'explicit', constraints: [levels: ['principal','service'], connectedTypes:'Place'])
_return(origin: 'explicit', constraints: [levels: 'service',connectedTypes:'Transition'] )

branch(origin: 'derived', derviationRules: ['new PNPattern(pragmatics: [\'Id\'], minOutEdges: 2, backLinks: 0, forwardLinks: 0)'],block: [type: "branch", ends: "merge"], constraints: [levels: 'service', connectedTypes: 'Place'])
merge(origin: 'derived', derviationRules: ['new PNPattern(pragmatics: [\'Id\'], minInEdges: 2, backLinks: 0, forwardLinks: 0)'], constraints: [levels: 'service', connectedTypes: 'Place'])

startLoop(origin: 'derived', derviationRules: ['new PNPattern(pragmatics: [\'Id\'], minInEdges: 2, forwardLinks: 1)'], block: [type: "Loop", ends: "endLoop"], constraints: [levels: 'service', connectedTypes:'Place'])
endLoop(origin: 'derived', derviationRules: ['new PNPattern(pragmatics: [\'Id\'], minOutEdges: 2, backLinks: 1)'], constraints: [levels: 'service', connectedTypes:'Place'])

setLCV(origin: 'derived',derviationRules: ['new PNPattern(adjacentPatterns: [new PNPattern(pragmatics: ["LCV"])])'] )


setToken(origin: 'explicit')
setValue(origin: 'explicit')

openChannel(origin: 'explicit')
openServerChannel(origin: 'explicit')

setField(origin: 'explicit')
send(origin: 'explicit')
receive(origin: 'explicit')